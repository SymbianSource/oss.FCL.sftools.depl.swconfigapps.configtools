/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package com.nokia.tools.carbide.ct.confml.model.confml1.validation;

import com.nokia.tools.carbide.ct.confml.model.confml1.EOptionElement;
import com.nokia.tools.carbide.ct.confml.model.confml1.EPropertyElement;

import com.nokia.tools.carbide.ct.confml.model.xsd.ELength;
import com.nokia.tools.carbide.ct.confml.model.xsd.EMaxExclusive;
import com.nokia.tools.carbide.ct.confml.model.xsd.EMaxInclusive;
import com.nokia.tools.carbide.ct.confml.model.xsd.EMaxLength;
import com.nokia.tools.carbide.ct.confml.model.xsd.EMinExclusive;
import com.nokia.tools.carbide.ct.confml.model.xsd.EMinInclusive;
import com.nokia.tools.carbide.ct.confml.model.xsd.EMinLength;
import com.nokia.tools.carbide.ct.confml.model.xsd.EPattern;
import com.nokia.tools.carbide.ct.confml.model.xsd.ETotalDigits;

import org.eclipse.emf.common.util.EList;

/**
 * A sample validator interface for {@link com.nokia.tools.carbide.ct.confml.model.confml1.ESettingElement}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface ESettingElementValidator {
	boolean validate();

	boolean validateRef(String value);

	boolean validateReadOnly(String value);

	boolean validateRelevant(String value);

	boolean validateRequired(String value);

	boolean validateMapKey(String value);

	boolean validateMapValue(String value);

	boolean validateName(String value);

	boolean validateConstraint(String value);

	boolean validateOptions(EList<EOptionElement> value);

	boolean validateProperties(EList<EPropertyElement> value);

	boolean validateType(String value);

	boolean validateMinOccurs(Integer value);

	boolean validateMaxOccurs(Integer value);

	boolean validateMinExclusive(EList<EMinExclusive> value);

	boolean validateMaxExclusive(EList<EMaxExclusive> value);

	boolean validateMinInclusive(EList<EMinInclusive> value);

	boolean validateMaxInclusive(EList<EMaxInclusive> value);

	boolean validateMinLength(EList<EMinLength> value);

	boolean validateMaxLength(EList<EMaxLength> value);

	boolean validateLength(EList<ELength> value);

	boolean validateTotalDigits(EList<ETotalDigits> value);

	boolean validatePattern(EList<EPattern> value);
}
