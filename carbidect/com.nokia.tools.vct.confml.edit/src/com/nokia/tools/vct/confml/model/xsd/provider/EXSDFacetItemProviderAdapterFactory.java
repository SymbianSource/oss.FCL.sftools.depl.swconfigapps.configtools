/*
 * Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
 * All rights reserved.
 * This component and the accompanying materials are made available
 * under the terms of "Eclipse Public License v1.0"
 * which accompanies this distribution, and is available
 * at the URL "http://www.eclipse.org/legal/epl-v10.html".
 * 
 * Initial Contributors:
 * Nokia Corporation - Initial contribution
 * 
 * Contributors:
 * 
 * Description: This file is part of com.nokia.tools.vct.confml.edit component.
 */

package com.nokia.tools.vct.confml.model.xsd.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.nokia.tools.vct.confml.model.xsd.util.EXSDFacetAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EXSDFacetItemProviderAdapterFactory extends
		EXSDFacetAdapterFactory implements ComposeableAdapterFactory,
		IChangeNotifier {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EXSDFacetItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.EMinInclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMinInclusiveItemProvider eMinInclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.EMinInclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMinInclusiveAdapter() {
		if (eMinInclusiveItemProvider == null) {
			eMinInclusiveItemProvider = new EMinInclusiveItemProvider(this);
		}

		return eMinInclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.EMinExclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMinExclusiveItemProvider eMinExclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.EMinExclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMinExclusiveAdapter() {
		if (eMinExclusiveItemProvider == null) {
			eMinExclusiveItemProvider = new EMinExclusiveItemProvider(this);
		}

		return eMinExclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.EMaxInclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMaxInclusiveItemProvider eMaxInclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.EMaxInclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMaxInclusiveAdapter() {
		if (eMaxInclusiveItemProvider == null) {
			eMaxInclusiveItemProvider = new EMaxInclusiveItemProvider(this);
		}

		return eMaxInclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.EMaxExclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMaxExclusiveItemProvider eMaxExclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.EMaxExclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMaxExclusiveAdapter() {
		if (eMaxExclusiveItemProvider == null) {
			eMaxExclusiveItemProvider = new EMaxExclusiveItemProvider(this);
		}

		return eMaxExclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.ELength} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELengthItemProvider eLengthItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.ELength}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELengthAdapter() {
		if (eLengthItemProvider == null) {
			eLengthItemProvider = new ELengthItemProvider(this);
		}

		return eLengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.EMinLength} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMinLengthItemProvider eMinLengthItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.EMinLength}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMinLengthAdapter() {
		if (eMinLengthItemProvider == null) {
			eMinLengthItemProvider = new EMinLengthItemProvider(this);
		}

		return eMinLengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.EMaxLength} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMaxLengthItemProvider eMaxLengthItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.EMaxLength}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMaxLengthAdapter() {
		if (eMaxLengthItemProvider == null) {
			eMaxLengthItemProvider = new EMaxLengthItemProvider(this);
		}

		return eMaxLengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.ETotalDigits} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETotalDigitsItemProvider eTotalDigitsItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.ETotalDigits}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETotalDigitsAdapter() {
		if (eTotalDigitsItemProvider == null) {
			eTotalDigitsItemProvider = new ETotalDigitsItemProvider(this);
		}

		return eTotalDigitsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.xsd.EPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPatternItemProvider ePatternItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.xsd.EPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEPatternAdapter() {
		if (ePatternItemProvider == null) {
			ePatternItemProvider = new EPatternItemProvider(this);
		}

		return ePatternItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

}
