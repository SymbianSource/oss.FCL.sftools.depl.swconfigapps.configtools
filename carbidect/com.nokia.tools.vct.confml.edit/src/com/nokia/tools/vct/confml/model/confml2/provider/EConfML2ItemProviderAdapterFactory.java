/*
 * Copyright (c) 2009 Nokia Corporation and/or its subsidiary(-ies).
 * All rights reserved.
 * This component and the accompanying materials are made available
 * under the terms of "Eclipse Public License v1.0"
 * which accompanies this distribution, and is available
 * at the URL "http://www.eclipse.org/legal/epl-v10.html".
 * 
 * Initial Contributors:
 * Nokia Corporation - Initial contribution
 * 
 * Contributors:
 * 
 * Description: This file is part of com.nokia.tools.vct.confml.edit component.
 */

package com.nokia.tools.vct.confml.model.confml2.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemColorProvider;
import org.eclipse.emf.edit.provider.IItemFontProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import com.nokia.tools.vct.confml.model.confml2.util.EConfML2AdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class EConfML2ItemProviderAdapterFactory extends EConfML2AdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EConfML2ItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemColorProvider.class);
		supportedTypes.add(IItemFontProvider.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EConfigurationElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EConfigurationElementItemProvider eConfigurationElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EConfigurationElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEConfigurationElementAdapter() {
		if (eConfigurationElementItemProvider == null) {
			eConfigurationElementItemProvider = new EConfigurationElementItemProvider(
					this);
		}

		return eConfigurationElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EFeatureElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EFeatureElementItemProvider eFeatureElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EFeatureElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEFeatureElementAdapter() {
		if (eFeatureElementItemProvider == null) {
			eFeatureElementItemProvider = new EFeatureElementItemProvider(this);
		}

		return eFeatureElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EFeatureData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EFeatureDataItemProvider eFeatureDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EFeatureData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEFeatureDataAdapter() {
		if (eFeatureDataItemProvider == null) {
			eFeatureDataItemProvider = new EFeatureDataItemProvider(this);
		}

		return eFeatureDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ESettingElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESettingElementItemProvider eSettingElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ESettingElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESettingElementAdapter() {
		if (eSettingElementItemProvider == null) {
			eSettingElementItemProvider = new ESettingElementItemProvider(this);
		}

		return eSettingElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ESettingData} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESettingDataItemProvider eSettingDataItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ESettingData}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESettingDataAdapter() {
		if (eSettingDataItemProvider == null) {
			eSettingDataItemProvider = new ESettingDataItemProvider(this);
		}

		return eSettingDataItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EViewElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EViewElementItemProvider eViewElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EViewElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEViewElementAdapter() {
		if (eViewElementItemProvider == null) {
			eViewElementItemProvider = new EViewElementItemProvider(this);
		}

		return eViewElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EGroupItemProvider eGroupItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEGroupAdapter() {
		if (eGroupItemProvider == null) {
			eGroupItemProvider = new EGroupItemProvider(this);
		}

		return eGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EFeatureRfs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EFeatureRfsItemProvider eFeatureRfsItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EFeatureRfs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEFeatureRfsAdapter() {
		if (eFeatureRfsItemProvider == null) {
			eFeatureRfsItemProvider = new EFeatureRfsItemProvider(this);
		}

		return eFeatureRfsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ESettingRfs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ESettingRfsItemProvider eSettingRfsItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ESettingRfs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createESettingRfsAdapter() {
		if (eSettingRfsItemProvider == null) {
			eSettingRfsItemProvider = new ESettingRfsItemProvider(this);
		}

		return eSettingRfsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EMetaElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMetaElementItemProvider eMetaElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EMetaElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMetaElementAdapter() {
		if (eMetaElementItemProvider == null) {
			eMetaElementItemProvider = new EMetaElementItemProvider(this);
		}

		return eMetaElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EOptionElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EOptionElementItemProvider eOptionElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EOptionElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEOptionElementAdapter() {
		if (eOptionElementItemProvider == null) {
			eOptionElementItemProvider = new EOptionElementItemProvider(this);
		}

		return eOptionElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EPropertyElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EPropertyElementItemProvider ePropertyElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EPropertyElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEPropertyElementAdapter() {
		if (ePropertyElementItemProvider == null) {
			ePropertyElementItemProvider = new EPropertyElementItemProvider(
					this);
		}

		return ePropertyElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EDescriptionElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EDescriptionElementItemProvider eDescriptionElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EDescriptionElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEDescriptionElementAdapter() {
		if (eDescriptionElementItemProvider == null) {
			eDescriptionElementItemProvider = new EDescriptionElementItemProvider(
					this);
		}

		return eDescriptionElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EIconElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EIconElementItemProvider eIconElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EIconElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEIconElementAdapter() {
		if (eIconElementItemProvider == null) {
			eIconElementItemProvider = new EIconElementItemProvider(this);
		}

		return eIconElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ELinkElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELinkElementItemProvider eLinkElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ELinkElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELinkElementAdapter() {
		if (eLinkElementItemProvider == null) {
			eLinkElementItemProvider = new ELinkElementItemProvider(this);
		}

		return eLinkElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EDataElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EDataElementItemProvider eDataElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EDataElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEDataElementAdapter() {
		if (eDataElementItemProvider == null) {
			eDataElementItemProvider = new EDataElementItemProvider(this);
		}

		return eDataElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ERfsElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERfsElementItemProvider eRfsElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ERfsElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createERfsElementAdapter() {
		if (eRfsElementItemProvider == null) {
			eRfsElementItemProvider = new ERfsElementItemProvider(this);
		}

		return eRfsElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ECommonAttrs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ECommonAttrsItemProvider eCommonAttrsItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ECommonAttrs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createECommonAttrsAdapter() {
		if (eCommonAttrsItemProvider == null) {
			eCommonAttrsItemProvider = new ECommonAttrsItemProvider(this);
		}

		return eCommonAttrsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EMetaContent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EMetaContentItemProvider eMetaContentItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EMetaContent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEMetaContentAdapter() {
		if (eMetaContentItemProvider == null) {
			eMetaContentItemProvider = new EMetaContentItemProvider(this);
		}

		return eMetaContentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.EConfML2Document} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EConfML2DocumentItemProvider eConfML2DocumentItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.EConfML2Document}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEConfML2DocumentAdapter() {
		if (eConfML2DocumentItemProvider == null) {
			eConfML2DocumentItemProvider = new EConfML2DocumentItemProvider(
					this);
		}

		return eConfML2DocumentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ELocalPathElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ELocalPathElementItemProvider eLocalPathElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ELocalPathElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createELocalPathElementAdapter() {
		if (eLocalPathElementItemProvider == null) {
			eLocalPathElementItemProvider = new ELocalPathElementItemProvider(
					this);
		}

		return eLocalPathElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ETargetPathElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ETargetPathElementItemProvider eTargetPathElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ETargetPathElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createETargetPathElementAdapter() {
		if (eTargetPathElementItemProvider == null) {
			eTargetPathElementItemProvider = new ETargetPathElementItemProvider(
					this);
		}

		return eTargetPathElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.nokia.tools.vct.confml.model.confml2.ERefNamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ERefNamedElementItemProvider eRefNamedElementItemProvider;

	/**
	 * This creates an adapter for a {@link com.nokia.tools.vct.confml.model.confml2.ERefNamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createERefNamedElementAdapter() {
		if (eRefNamedElementItemProvider == null) {
			eRefNamedElementItemProvider = new ERefNamedElementItemProvider(
					this);
		}

		return eRefNamedElementItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory
				.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(
			ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class)
					|| (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (eConfigurationElementItemProvider != null)
			eConfigurationElementItemProvider.dispose();
		if (eFeatureElementItemProvider != null)
			eFeatureElementItemProvider.dispose();
		if (eFeatureDataItemProvider != null)
			eFeatureDataItemProvider.dispose();
		if (eSettingElementItemProvider != null)
			eSettingElementItemProvider.dispose();
		if (eSettingDataItemProvider != null)
			eSettingDataItemProvider.dispose();
		if (eViewElementItemProvider != null)
			eViewElementItemProvider.dispose();
		if (eGroupItemProvider != null)
			eGroupItemProvider.dispose();
		if (eFeatureRfsItemProvider != null)
			eFeatureRfsItemProvider.dispose();
		if (eSettingRfsItemProvider != null)
			eSettingRfsItemProvider.dispose();
		if (eMetaElementItemProvider != null)
			eMetaElementItemProvider.dispose();
		if (eOptionElementItemProvider != null)
			eOptionElementItemProvider.dispose();
		if (ePropertyElementItemProvider != null)
			ePropertyElementItemProvider.dispose();
		if (eDescriptionElementItemProvider != null)
			eDescriptionElementItemProvider.dispose();
		if (eIconElementItemProvider != null)
			eIconElementItemProvider.dispose();
		if (eLinkElementItemProvider != null)
			eLinkElementItemProvider.dispose();
		if (eDataElementItemProvider != null)
			eDataElementItemProvider.dispose();
		if (eRfsElementItemProvider != null)
			eRfsElementItemProvider.dispose();
		if (eCommonAttrsItemProvider != null)
			eCommonAttrsItemProvider.dispose();
		if (eMetaContentItemProvider != null)
			eMetaContentItemProvider.dispose();
		if (eConfML2DocumentItemProvider != null)
			eConfML2DocumentItemProvider.dispose();
		if (eLocalPathElementItemProvider != null)
			eLocalPathElementItemProvider.dispose();
		if (eTargetPathElementItemProvider != null)
			eTargetPathElementItemProvider.dispose();
		if (eRefNamedElementItemProvider != null)
			eRefNamedElementItemProvider.dispose();
	}

}
